- name: Copy default templates
  ansible.builtin.import_tasks:
    file: copy-templates.yml
  vars:
    directory: ../templates
    target: "{{ dns_server_root }}"
    notify_: Restart dns-server service
    files:
      adguard:
        owner: 0
        group: 0
        mode: "700"
      adguard/AdGuardHome.yaml.j2:
        owner: 0
        group: 0
        mode: "600"
      dnscrypt-proxy:
        owner: 1000
        group: 1001
      dnscrypt-proxy/dnscrypt-proxy.toml:
        owner: 1001
        group: 1001

- name: Copy templates for {{ inventory_hostname }}
  ansible.builtin.import_tasks:
    file: copy-templates.yml
  vars:
    directory: "templates/{{ ansible_role_name }}/{{ inventory_hostname }}"
    target: "{{ dns_server_root }}"
    notify_: Restart dns-server service

- name: Attempt to quickly reload services
  ansible.builtin.systemd_service:
    name: "{{ item }}"
    state: reloaded
  loop:
    - dnscrypt-proxy.service
    - dnsmasq.service
  failed_when: false

- name: Ensure packages are installed
  ansible.builtin.package:
    name: >-
      {{
        dns_server_packages |
        ansible.builtin.dict2items |
        map(attribute = 'value.name')
      }}

- name: Download releases
  ansible.builtin.import_tasks:
    file: download-release.yml
  vars:
    assets: >-
      {{
        dns_server_download_assets |
        ansible.builtin.dict2items
      }}

- name: Install systemd units
  ansible.builtin.import_tasks:
    file: systemd-install-units.yml
  vars:
    directory: "{{ dns_server_root }}/systemd"
    local_units: templates/systemd
    notify_: Restart dns-server service

- name: Ensure dnsmasq systemd override directory exists
  ansible.builtin.file:
    path: /etc/systemd/system/dnsmasq.service.d
    state: directory
    owner: 0
    group: 0
    mode: "755"

- name: Set dnsmasq override
  ansible.builtin.template:
    src: systemd/dnsmasq.service.d/override.conf
    dest: /etc/systemd/system/dnsmasq.service.d/override.conf
    owner: 0
    group: 0
    mode: "644"
  notify: Restart dns-server service

- name: Copy systemd-resolved config files
  ansible.builtin.import_tasks:
    file: copy-templates.yml
  vars:
    directory: templates/systemd-resolved/resolved.conf.d
    target: /etc/systemd/resolved.conf.d
    notify_: Restart systemd-resolved service

- name: Start systemd-resolved
  ansible.builtin.systemd:
    name: systemd-resolved
    state: started
    enabled: true
  register: systemd_resolved_started

- name: Allow DHCP and DNS-related services from internal network
  ansible.posix.firewalld:
    zone: internal
    service: "{{ item }}"
    immediate: true
    permanent: true
    state: enabled
  loop: "{{ dns_server_firewalld_services }}"

- name: Start systemd units
  ansible.builtin.systemd:
    name: "{{ item }}"
    state: started
    enabled: true
    daemon_reload: true
  loop: "{{ dns_server_units }}"
  register: dns_server_started

- name: Install DNS utils
  ansible.builtin.package:
    name: bind-utils
    state: present

- name: Register with loadbalancer
  ansible.builtin.import_tasks:
    file: register-with-loadbalancer.yml
