providers:
  {% if traefik_install_method == 'docker' %}
  docker:
    # Need to configure label traefik.enable=true.
    exposedByDefault: false
    # All traefik-enabled containers must be on this network.
    network: web
  {% endif %}
  file:
    directory: {{ traefik_config_root_dir }}/conf.d
    watch: true

api:
  dashboard: true

# docker exec traefik traefik healthcheck
ping: {}

log:
  level: INFO

entryPoints:
  http:
    address: ":80"
    http:
      redirections:
        entryPoint:
          to: https
          scheme: https
          permanent: true

  https:
    address: ":443"
    http:
      tls:
        certResolver: {{ traefik_cert_resolver }}
    http2:
      maxConcurrentStreams: 250
    http3: {}
    {{
      traefik_https_entrypoint_config |
      ansible.builtin.to_nice_yaml(indent = 2, sort_keys = false) |
      indent(4)
      if traefik_https_entrypoint_config.keys() | length > 0
    }}
  {{
    traefik_entrypoints |
    ansible.builtin.to_nice_yaml(indent = 2, sort_keys = false) |
    indent(2)
    if traefik_entrypoints.keys() | length > 0
  }}

certificatesResolvers:
  letsencrypt:
    acme:
      email: agross@therightstuff.de
      storage: {{ traefik_config_root_dir }}/acme/letsencrypt.json
      tlsChallenge: {}

  {% if traefik_acme_inwx %}
  letsencrypt-dns:
    acme:
      email: agross@therightstuff.de
      storage: {{ traefik_config_root_dir }}/acme/letsencrypt-dns.json
      dnsChallenge:
        provider: inwx
        propagation:
          # By default, the Traefik/lego provider above verifies the TXT record
          # before letting ACME/Let's Encrypt verify.
          # The default timeout for the TXT records to be publicly visible on the
          # authorative INWX DNS servers is 6 minutes. During that time lego
          # repeatedly checks if they are visible. If not, the check is retried
          # until the timeout is reached. Otherwise, the certificate order is
          # passed on to ACME.
          #
          # https://go-acme.github.io/lego/dns/inwx/
          #
          # LEGO_DISABLE_CNAME_SUPPORT needs to be set to true because
          # {{ network.domain }} has a wildcard CNAME record registered in INWX
          # DNS.
          # _acme-challenge.{{ network.domain }} would be resolved to find the
          # delegated domain used for certificate validations.
          # https://letsencrypt.org/2019/10/09/onboarding-your-customers-with-lets-encrypt-and-acme.html#the-advantages-of-a-cname
          delayBeforeChecks: 10
        # Use these DNS servers to find the SOA of the requesting domain.
        # The internal DNS might paint a different picture that is not usable.
        resolvers:
          - ns.inwx.de
          - ns2.inwx.de
          - ns3.inwx.eu
  {% endif %}
