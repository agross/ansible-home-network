#!/usr/bin/env bash
# vim: set ft=bash ts=2 sw=2 et:

set -euo pipefail

db() {
  local container_name backup_file

  container_name="${1:?Need database container name}"
  backup_file="${2:?Need backup file}"

  if ! docker container\
              exec \
              "$container_name" \
              pg_dumpall | \
         gzip -9 > "$backup_file"; then
    >&2 printf 'Database backup failed, removing %s\n' "$backup_file"
    rm -f "$backup_file" > /dev/null
    exit 1
  fi
}

data() {
  local source_dir backup_file

  source_dir="${1:?Need source directory}"
  backup_file="${2:?Need backup file}"

  tar --exclude="$source_dir/database" \
      --exclude="$source_dir/job_logs" \
      --exclude="$source_dir/trivy-adapter" \
      -czf "$backup_file" "$source_dir"
}

cleanup() {
  local directory keep_days

  directory="${1:?Need directory to clean up}"
  keep_days="${2:?Need days to keep}"

  # Delete files older than keep_days days.
  find "$directory" \
       -maxdepth 1 \
       -type f \
       -mtime "+$keep_days" \
       -printf 'Deleting old backup %p (%t)\n' \
       -delete
}

rsync() {
  local source target

  source="${1:?Need rsync source}"
  target="${2:?Need rsync target}"

  command rsync --rsh ssh \
                --numeric-ids \
                --archive \
                --verbose \
                --progress \
                --partial \
                --compress \
                --human-readable \
                --delete \
                "$source" \
                "$target"
}

target_dir={{ root | quote }}/backup/backups
timestamp="$(date +'%Y-%m-%dT%H-%M-%S')"

mkdir --parents "$target_dir"

db {{ service_name | quote }}_postgresql_1 \
   "$target_dir/$timestamp-db.gz"

data {{ root | quote }}/app \
     "$target_dir/$timestamp-data.tar.gz"

cleanup "$target_dir" 14

rsync "$target_dir" "$RSYNC_TARGET"
