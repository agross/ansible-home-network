#!/usr/bin/env bash
# vim: set ft=jinja-shell ts=2 sw=2 et:

set -euo pipefail

db() {
  local backup_file

  backup_file="${1:?Need backup file}"

  if ! docker compose \
              --project-name {{ service_name | ansible.builtin.mandatory | ansible.builtin.quote }} \
              exec \
              postgresql \
              pg_dumpall | \
         gzip -9 > "$backup_file"; then
    >&2 printf 'Database backup failed, removing %s\n' "$backup_file"
    rm -f "$backup_file" > /dev/null
    exit 1
  fi
}

data() {
  local backup_dir

  backup_dir="${1:?Need backup directory}"

  rsync --numeric-ids \
        --archive \
        --progress \
        --human-readable \
        --exclude=database \
        --exclude=job_logs \
        --exclude=trivy-adapter \
        --delete \
        --delete-excluded \
        {{ root | ansible.builtin.mandatory | ansible.builtin.quote }}/app/ \
        "$backup_dir"
}

cleanup() {
  local directory

  directory="${1:?Need directory to clean up}"

  # Delete database backups older than {{ harbor_backup_keep_days }} days.
  find "$directory" \
       -maxdepth 1 \
       -type f \
       -mtime '+{{ harbor_backup_keep_days | mandatory }}' \
       -printf 'Deleting old backup %p (%t)\n' \
       -delete
}

sync() {
  local source target

  source="${1:?Need rsync source}"

  rsync --rsh 'ssh -i backup/key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null' \
        --rsync-path='sudo /usr/local/bin/rsync' \
        --super \
        --numeric-ids \
        --archive \
        --verbose \
        --progress \
        --partial \
        --compress \
        --human-readable \
        --delete \
        "$source/" \
        {{ backup_ssh_target | ansible.builtin.mandatory | ansible.builtin.quote }}/harbor
}

timestamp="$(date +'%Y-%m-%dT%H-%M-%S')"

target_dir="$PWD/backup/backups"
mkdir --parents "$target_dir"

db "$target_dir/$timestamp-db.gz"
data "$target_dir/data"
cleanup "$target_dir"
sync "$target_dir"
