- name: Copy templates
  ansible.builtin.import_tasks: copy-templates.yml
  vars:
    directory: ../templates
    target: "{{ harbor_root }}"
    notify_: Restart harbor service

- name: Download Harbor online installer {{ harbor_installer_version }}
  ansible.builtin.get_url:
    url: "{{ harbor_installer_url }}"
    dest: "{{ harbor_installer_directory }}.tgz"
    mode: "644"

- name: Ensure directory for extracted installer exists
  ansible.builtin.file:
    path: "{{ harbor_installer_directory }}"
    state: directory
    mode: "755"

- name: Extract Harbor installer
  ansible.builtin.unarchive:
    remote_src: true
    src: "{{ harbor_installer_directory }}.tgz"
    dest: "{{ harbor_installer_directory }}"
    creates: "{{ harbor_installer_directory }}/harbor/harbor.yml.tmpl"

- name: Read harbor.yml.tmpl
  ansible.builtin.slurp:
    src: "{{ harbor_installer_directory }}/harbor/harbor.yml.tmpl"
  register: harbor_yml

- name: Combine harbor config with defaults from harbor.yml.tmpl
  ansible.builtin.set_fact:
    harbor_yml_patched: >-
      {{
        harbor_yml.content |
        ansible.builtin.b64decode |
        ansible.builtin.from_yaml |
        ansible.builtin.combine(harbor_config, recursive = true) |
        ansible.builtin.dict2items |
        rejectattr('key', 'in', harbor_config_reject) |
        ansible.builtin.items2dict
      }}

- name: Display config
  ansible.builtin.debug:
    var: harbor_yml_patched

- name: Write combined config to harbor.yml
  ansible.builtin.copy:
    content: "{{ harbor_yml_patched | ansible.builtin.to_nice_yaml(indent=2) }}"
    dest: "{{ harbor_installer_directory }}/harbor/harbor.yml"
    mode: "644"
  register: harbor_yml_patched_templated
  notify: Restart harbor service

- name: Regenerate docker-compose.yml # noqa no-handler
  when: harbor_yml_patched_templated is changed
  block:
    - name: Get secretkey file system entry
      ansible.builtin.stat:
        path: "{{ harbor_root }}/app/secret/keys/secretkey"
      register: harbor_secret_key

    - name: Remove secret key if it is a directory
      when: >-
        harbor_secret_key.stat.isdir is defined and
        harbor_secret_key.stat.isdir
      ansible.builtin.file:
        path: "{{ harbor_root }}/app/secret/keys/secretkey"
        state: absent

    - name: Run Harbor prepare script to generate docker-compose.yml
      ansible.builtin.command:
        argv: "{{ ['./prepare'] + harbor_installer_arguments }}"
      args:
        chdir: "{{ harbor_installer_directory }}/harbor"
      changed_when: true

    - name: >-
        Remove "container_name: <name>" from generated docker-compose.yml
      ansible.builtin.replace:
        path: "{{ harbor_installer_directory }}/harbor/docker-compose.yml"
        regexp: container_name:.*
        replace: ""
        backup: true
      notify: Restart harbor service
      register: harbor_docker_compose_yaml

    - name: >-
        Replace "restart: always" with "restart: unless-stopped"
        in generated docker-compose.yml
      ansible.builtin.replace:
        path: "{{ harbor_installer_directory }}/harbor/docker-compose.yml"
        regexp: restart:.*
        replace: "restart: unless-stopped"
      notify: Restart harbor service

    - name: Validate docker-compose.yml
      ansible.builtin.command:
        argv:
          - docker
          - compose
          - --file
          - "{{ harbor_installer_directory }}/harbor/docker-compose.yml"
          - config
          - --quiet
      changed_when: false

    - name: Pull images
      ansible.builtin.command:
        argv:
          - docker
          - compose
          - --file
          - "{{ harbor_installer_directory }}/harbor/docker-compose.yml"
          - pull
      register: harbor_docker_compose_pull
      changed_when: "'Pull complete' in harbor_docker_compose_pull.stderr"

  rescue:
    - name: Restore backup file because validation failed
      when: harbor_docker_compose_yaml is defined
      ansible.builtin.copy:
        remote_src: true
        src: "{{ harbor_docker_compose_yaml['backup_file'] }}"
        dest: "{{ harbor_installer_directory }}/harbor/docker-compose.yml"
        mode: preserve
  always:
    - name: Delete backup file
      when: harbor_docker_compose_yaml is defined
      ansible.builtin.file:
        path: "{{ harbor_docker_compose_yaml['backup_file'] }}"
        state: absent

- name: Copy docker-compose.override.yml that includes Traefik labels
  ansible.builtin.template:
    src: templates/docker-compose.override.yml.j2
    dest: "{{ harbor_installer_directory }}/harbor/docker-compose.override.yml"
    owner: 0
    group: 0
    mode: "644"
    lstrip_blocks: true
  notify: Restart harbor service

# https://www.claudiokuenzler.com/blog/958/running-harbor-registry-behind-reverse-proxy-solve-docker-push-errors
- name: >-
    Remove "proxy_set_header X-Forwarded-Proto" from Harbor's nginx config
    because we're running behind a reverse proxy.
  ansible.builtin.replace:
    path: "{{ harbor_installer_directory }}/harbor/common/config/nginx/nginx.conf"
    regexp: proxy_set_header\s+X-Forwarded-Proto.*
    replace: ""
    backup: true
  notify: Restart harbor service

- name: Symlink backup configuration
  ansible.builtin.file:
    state: link
    src: "{{ harbor_root }}/backup.yaml"
    path: "/etc/borgmatic.d/{{ ansible_role_name }}.yaml"

- name: Install systemd units
  ansible.builtin.import_tasks: systemd-install-units.yml
  vars:
    directory: "{{ harbor_root }}/systemd"
    local_units: templates/systemd
    notify_: Restart harbor service

- name: Start service
  ansible.builtin.systemd:
    state: started
    enabled: true
    name: "{{ item }}"
    daemon_reload: true
  loop: "{{ systemd_units_autostart }}"
  register: harbor_started

- name: Register with loadbalancer
  ansible.builtin.import_tasks:
    file: register-with-loadbalancer.yml
