- name: Copy templates
  ansible.builtin.import_tasks: copy-templates.yml
  vars:
    directory: ../templates
    notify: Restart harbor service

- name: Set SELinux file contexts
  ansible.builtin.import_tasks: systemd-unit-file-contexts.yml
  vars:
    directory: "{{ root }}/systemd"

- name: Symlink systemd unit file
  ansible.builtin.file:
    state: link
    src: "{{ root }}/systemd/harbor.service"
    path: /etc/systemd/system/{{ service_name }}.service
    force: true
  notify: Restart harbor service

- name: Symlink systemd mount file
  ansible.builtin.file:
    state: link
    src: "{{ root }}/systemd/data-harbor-app.mount"
    path: "/etc/systemd/system/data-{{ service_name }}-app.mount"
    force: true
  notify: Restart harbor service

- name: Download Harbor online installer {{ harbor_installer_version }}
  ansible.builtin.get_url:
    url: "{{ harbor_installer_url }}"
    dest: "{{ harbor_installer_directory }}.tgz"
    mode: '644'

- name: Ensure directory for extracted installer exists
  ansible.builtin.file:
    path: "{{ harbor_installer_directory }}"
    state: directory
    mode: '755'

- name: Extract Harbor installer
  ansible.builtin.unarchive:
    remote_src: true
    src: "{{ harbor_installer_directory }}.tgz"
    dest: "{{ harbor_installer_directory }}"
    creates: "{{ harbor_installer_directory }}/harbor/harbor.yml.tmpl"

- name: Read harbor.yml.tmpl
  ansible.builtin.slurp:
    src: "{{ harbor_installer_directory }}/harbor/harbor.yml.tmpl"
  register: harbor_yml

- name: Combine harbor config with defaults from harbor.yml.tmpl
  ansible.builtin.set_fact:
    harbor_yml_patched: >-
      {{ harbor_yml.content |
           b64decode |
           from_yaml |
           combine(harbor_config, recursive = true) |
           dict2items |
           rejectattr('key', 'in', harbor_config_reject) |
           items2dict }}

- name: Display config
  ansible.builtin.debug:
    var: harbor_yml_patched

- name: Write combined config to harbor.yml
  ansible.builtin.copy:
    content: "{{ harbor_yml_patched | to_nice_yaml(indent=2) }}"
    dest: "{{ harbor_installer_directory }}/harbor/harbor.yml"
    mode: '644'
  register: harbor_yml_patched_templated
  notify: Restart harbor service

- name: Regenerate docker-compose.yml  # noqa no-handler
  when: harbor_yml_patched_templated is changed
  block:
    - name: Run Harbor prepare script to generate docker-compose.yml
      ansible.builtin.command:
        argv: "{{ ['./prepare'] + harbor_installer_arguments }}"
      args:
        chdir: "{{ harbor_installer_directory }}/harbor"
      changed_when: true

    - name: >-
        Remove "container_name: <name>" from generated docker-compose.yml
      ansible.builtin.replace:
        path: "{{ harbor_installer_directory }}/harbor/docker-compose.yml"
        regexp: container_name:.*
        replace: ''
        backup: true
      notify: Restart harbor service
      register: docker_compose_yaml

    - name: >-
        Replace "restart: always" with "restart: unless-stopped"
        in generated docker-compose.yml
      ansible.builtin.replace:
        path: "{{ harbor_installer_directory }}/harbor/docker-compose.yml"
        regexp: restart:.*
        replace: 'restart: unless-stopped'
      notify: Restart harbor service

    - name: Validate docker-compose.yml
      ansible.builtin.command:
        argv:
          - docker
          - compose
          - --file
          - "{{ harbor_installer_directory }}/harbor/docker-compose.yml"
          - config
          - --quiet
      changed_when: false

  rescue:
    - name: Restore backup file because validation failed
      when: docker_compose_yaml is defined
      ansible.builtin.copy:
        remote_src: true
        src: "{{ docker_compose_yaml['backup_file'] }}"
        dest: "{{ harbor_installer_directory }}/harbor/docker-compose.yml"
        mode: preserve
  always:
    - name: Delete backup file
      when: docker_compose_yaml is defined
      ansible.builtin.file:
        path: "{{ docker_compose_yaml['backup_file'] }}"
        state: absent

# https://www.claudiokuenzler.com/blog/958/running-harbor-registry-behind-reverse-proxy-solve-docker-push-errors
- name: >-
    Remove "proxy_set_header X-Forwarded-Proto" from Harbor's nginx config
    because we're running behind a reverse proxy.
  ansible.builtin.replace:
    path: "{{ harbor_installer_directory }}/harbor/common/config/nginx/nginx.conf"
    regexp: proxy_set_header\s+X-Forwarded-Proto.*
    replace: ''
    backup: true
  notify: Restart harbor service

- name: Ensure environment files can be read by systemd
  community.general.sefcontext:
    target: "{{ root }}/(.*\\/)?\\.env.*"
    setype: systemd_unit_file_t
    state: present

- name: Apply file context to environment files
  ansible.builtin.command:
    argv:
      - restorecon
      - -iRv
      - "{{ root }}"
  register: restorecon_result
  changed_when: restorecon_result.stdout | length > 0

- name: Symlink backup configuration
  ansible.builtin.file:
    state: link
    src: "{{ root }}/backup.yaml"
    path: "/etc/borgmatic.d/{{ service_name }}.yaml"

- name: Start service
  ansible.builtin.systemd:
    state: started
    enabled: true
    name: "{{ service_name }}"
    daemon_reload: true
  register: harbor_started
