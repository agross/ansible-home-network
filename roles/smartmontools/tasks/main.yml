- name: Ensure smartmontools is installed
  ansible.builtin.package:
    name: smartmontools
    state: present

- name: Include vars for operating system
  ansible.builtin.include_vars:
    file: "{{ file }}"
  with_first_found:
    - files:
        - "{{ ansible_distribution }}.yml"
        - "{{ ansible_os_family }}.yml"
    - paths:
        - vars
  loop_control:
    loop_var: file

- name: Create service override directory
  ansible.builtin.file:
    path: "/etc/systemd/system/{{ smartd_service_name }}.service.d"
    state: directory
    owner: 0
    group: 0
    mode: "755"

- name: Ensure smartmontools service errors generate notifications
  ansible.builtin.template:
    src: unit-status-mail.conf
    dest: /etc/systemd/system/{{ smartd_service_name }}.service.d/unit-status-mail.conf
    owner: 0
    group: 0
    mode: "644"
  notify: Restart smartmontools service

- name: Ensure virtualized hosts can monitor passed-though devices
  when: ansible_virtualization_role == 'guest'
  ansible.builtin.template:
    src: enabled-for-virtual-host.conf
    dest: /etc/systemd/system/{{ smartd_service_name }}.service.d/enabled-for-virtual-host.conf
    owner: 0
    group: 0
    mode: "644"
  notify: Restart smartmontools service

- name: Create directory for email notifier
  ansible.builtin.file:
    path: "{{ smartd_email_notifier | ansible.builtin.dirname }}"
    state: directory
    owner: 0
    group: 0
    mode: "755"

- name: Ensure notifications are sent using sendmail
  ansible.builtin.template:
    src: email-notifications
    dest: "{{ smartd_email_notifier }}"
    owner: 0
    group: 0
    mode: "755"

- name: Ensure Fedora runs the notifier script
  when: ansible_distribution == 'Fedora'
  ansible.builtin.lineinfile:
    path: /etc/smartmontools/smartd.conf
    regexp: '^(DEVICESCAN .* -M exec) [^\s]+ (.*)$'
    backrefs: true
    line: '\1 {{ smartd_email_notifier }} \2'
  notify: Restart smartmontools service
