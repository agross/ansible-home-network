#!/usr/bin/env bash

set -euo pipefail

influxdb=(docker compose \
                 --project-name logger \
                 exec \
                 influxdb)

create-swap() {
  if (( EUID != 0 )); then
    >&2 printf 'Please run as root in order to use temporary swap space.\n'
    exit 1
  fi

  printf 'Creating swap...\n'
  trap 'cleanup-swap $?' ERR INT EXIT TERM

  swapfile="$(mktemp --suffix=influx-rename-swap --tmpdir=/)"

  fallocate -l 5G -- "$swapfile"
  chmod 600 -- "$swapfile"
  mkswap -- "$swapfile"
  swapon -- "$swapfile"
}

cleanup-swap() {
  if [[ -f "$swapfile" ]]; then
    printf 'Cleaning swap after receiving signal %s...\n' "$1"

    swapoff -- "$swapfile"
    rm -- "$swapfile"
  fi
}

rename-one() {
  local bucket="${1?Need bucket}"
  local from="${2?Need measurement that is copied from}"
  local to="${3?Need measurement that is copied to}"

  local copy
  copy=$(cat <<EOF
    from(bucket: "$bucket")
    |> range(start: 0, stop: now())
    |> filter(fn: (r) => r["_measurement"] == "$from")
    |> set(key: "_measurement", value: "$to")
    |> to(bucket: "$bucket")
    |> map(fn: (r) => ({ values_copied: string(v: r._value) }))
    |> count(column: "values_copied")
EOF
)

  printf 'Copying measurement "%s" to "%s" (bucket: %s)...\n' \
         "$from" \
         "$to" \
         "$bucket"

  "${influxdb[@]}" influx query "$copy"

  printf 'Dropping measurement "%s" (bucket: %s)...\n' \
         "$from" \
         "$bucket"

  "${influxdb[@]}" influx delete \
                          --bucket "$bucket" \
                          --start 1970-01-01T00:00:00Z \
                          --stop "$(date +'%Y-%m-%dT%H:%M:%SZ')" \
                          --predicate "_measurement=\"$from\""
}

rename() {
  if [[ "${1-}" == --prefix ]]; then
    shift
    local prefix=
  fi

  local bucket="${1?Need bucket}"
  local from="${2?Need measurement that is copied from}"
  local to="${3?Need measurement that is copied to}"

  if [[ -v prefix ]]; then
    printf 'Determining measurements prefixed "%s"...\n' \
           "$from"

    local measurements_query
    measurements_query=$(cat <<EOF
      import "influxdata/influxdb/schema"
      import "strings"

      schema.measurements(bucket: "$bucket")
      |> filter(fn: (r) => strings.hasPrefix(v: r._value, prefix: "$from"))
EOF
)

    local -a measurements
    mapfile -t -s 4 measurements < <("${influxdb[@]}" influx query --raw "$measurements_query")

    local source suffix target
    for source in "${measurements[@]}"; do
      # ,,0,What we are interested in\r
      source="${source:4:-1}"

      # Last line: a single \r.
      [[ -z "$source" ]] && break

      suffix="${source:${#from}}"
      target="$to$suffix"

      rename-one "$bucket" "$source" "$target"
    done
  else
    rename-one "$bucket" "$from" "$to"
  fi
}

create-swap

rename "${@}"
