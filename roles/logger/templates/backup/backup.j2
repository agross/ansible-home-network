#!/usr/bin/env bash
# vim: set ft=bash ts=2 sw=2 et:

set -euo pipefail

influxdb() {
  local temp db databases

  databases=({{ logger_backup_influxdb_databases |
                  default([], true) |
                  map('quote') |
                  join(' ') }})

  for db in "${databases[@]}"; do
    temp="$(mktemp --directory)"

    docker run \
          --rm \
          --name influxdb-backup \
          --network 'container:{{ service_name }}_influxdb_1' \
          --volume "$temp:/backups"  \
          'influxdb:{{ influxdb_version }}' \
          influxd backup \
                  -portable \
                  -host influxdb:8088 \
                  -database "$db" \
                  /backups

    local timestamp
    timestamp="$(date +'%Y-%m-%dT%H-%M-%S')"

    mkdir --parents -- "{{ root }}/backup/backups/influxdb"

    tar -czf \
        "{{ root }}/backup/backups/influxdb/$db-$timestamp.tar.gz" \
        --directory "$temp" \
        .

    rm -rf -- "$temp"
  done
}

{% if ansible_architecture != 'x86_64' %}
grafana-build-backup() {
  local image="${1?Need image}"

  local temp
  temp="$(mktemp --directory)"

  pushd "$temp" > /dev/null

  git clone https://github.com/ysde/grafana-backup-tool.git .

  # No ARM-based variant available.
  docker build \
         --tag "$image" \
         --label local=true \
         .

  popd > /dev/null
  rm -rf -- "$temp"
}
{% endif %}

grafana() {
  {% if ansible_architecture != 'x86_64' %}
  local image='ysde/docker-grafana-backup-tool:for-host-architecture'

  if [[ -z "$(docker images --filter=reference="$image" --quiet)" ]]; then
    grafana-build-backup "$image"
  fi
  {% else %}
  local image='ysde/docker-grafana-backup-tool'
  {% endif %}

  local temp
  temp="$(mktemp --directory)"

  chown 1337:1337 -- "$temp"

  docker run \
         --rm \
         --name grafana-backup \
         --env 'GRAFANA_URL=http://grafana:3000' \
         --env 'GRAFANA_TOKEN={{ logger_backup_grafana.api_key }}' \
         --env 'GRAFANA_ADMIN_ACCOUNT={{ logger_backup_grafana.admin.user }}' \
         --env 'GRAFANA_ADMIN_PASSWORD={{ logger_backup_grafana.admin.password }}' \
         --env 'TZ=Europe/Berlin' \
         --network 'container:{{ service_name }}_grafana_1' \
         --volume "$temp:/opt/grafana-backup-tool/_OUTPUT_"  \
         "$image"

  mkdir --parents -- "{{ root }}/backup/backups/grafana"

  find "$temp" \
      -name "*.tar.gz" \
      -execdir mv '{}' '{{ root }}/backup/backups/grafana' \;

  rm -rf -- "$temp"
}

cleanup() {
  # Delete files older than {{ logger_backup_cleanup_keep }} days.
  find '{{ root }}/backup/backups' \
       -type f \
       -mtime '+{{ logger_backup_cleanup_keep }}' \
       -printf 'Deleting old backup %p (%t)\n' \
       -delete
}

{% if logger_backup_rsync_target | default('', true) | length %}
rsync() {
  command rsync --rsh ssh \
                --numeric-ids \
                --archive \
                --verbose \
                --progress \
                --partial \
                --compress \
                --human-readable \
                --delete \
                '{{ root }}/backup/backups/' \
                '{{ logger_backup_rsync_target }}'
}
{% endif %}

influxdb
grafana
cleanup
{% if logger_backup_rsync_target | default('', true) | length %}
rsync
{% endif %}
