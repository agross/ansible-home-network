volumes:
  influxdb2-config:
  influxdb2-data:
  grafana-data:

{% if traefik_host or
      iobroker_support_wake_on_lan | default(false, true) | bool == false %}
networks:
{% if traefik_host  %}
  web:
    external: true
{% endif %}
{% if iobroker_support_wake_on_lan | default(false, true) | bool == false %}
  iobroker_default:
    external: true
{% endif %}
{% endif %}

services:
  influxdb:
    image: influxdb:alpine

    restart: unless-stopped
    env_file: ./influxdb/.env
    labels:
      traefik.enable: 'true'
      traefik.http.routers.influxdb.entrypoints: https
      traefik.http.routers.influxdb.rule: Host(`influxdb.{{ network.domain }}`)
      traefik.http.services.influxdb.loadbalancer.server.port: 8086
    {% if traefik_host %}
    networks:
      - default
      - web
    {% else %}
    ports:
      - "8086:8086"
    {% endif %}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./backups/influxdb:/backups
      - influxdb2-config:/etc/influxdb2
      - influxdb2-data:/var/lib/influxdb2
    healthcheck:
      test:
        - CMD
        - wget
        - --server-response
        - --output-document
        - /dev/null
        - http://localhost:8086/ping
      start_period: 30s
      interval: 5s

  grafana:
    image: grafana/grafana

    restart: unless-stopped
    labels:
      traefik.enable: 'true'
      traefik.http.routers.grafana.entrypoints: https
      traefik.http.routers.grafana.rule: Host(`grafana.{{ network.domain }}`)
      traefik.http.services.grafana.loadbalancer.server.port: 3000
    {% if traefik_host %}
    networks:
      - default
      - web
    {% else %}
    ports:
      - "3000:3000"
    {% endif %}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini:ro
      - grafana-data:/var/lib/grafana
    healthcheck:
      test:
        - CMD
        - wget
        - -S
        - -O
        - /dev/null
        - http://localhost:3000
      start_period: 5s
      interval: 5s
    depends_on:
      influxdb:
        condition: service_healthy

  telegraf:
    image: telegraf

    restart: unless-stopped
    privileged: true
    user: telegraf:{{ docker_group | mandatory }}
    environment:
      HOST_ETC: /host/etc
      HOST_PROC: /host/proc
      HOST_SYS: /host/sys
      HOST_VAR: /host/var
      HOST_RUN: /host/run
      HOST_MOUNT_PREFIX: /host
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro
      - ./telegraf/telegraf.d:/etc/telegraf/telegraf.d:ro
      # For host monitoring.
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /:/host:ro
    depends_on:
      influxdb:
        condition: service_healthy
