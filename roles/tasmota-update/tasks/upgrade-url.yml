- name: Get current OTA URL
  delegate_to: localhost
  ansible.builtin.uri:
    url: >-
      http://{{
        hostvars[inventory_hostname].ansible_host | default(inventory_hostname)
      }}/cm?cmnd=OtaUrl{{ tasmota_credentials | default('') }}
    return_content: true
  register: tasmota_update_original_ota_url
  changed_when: false

- name: Determine OTA URL for variant
  ansible.builtin.set_fact:
    tasmota_update_ota_url: >-
      {{
        tasmota_update_latest_release.results |
        selectattr('item.key', 'equalto', tasmota_update_tasmota_variant) |
        map(attribute = 'json') |
        first |
        community.general.json_query(url_query)
      }}
  vars:
    url_query: >-
      "{{
        tasmota_update_latest_release_key
      }}"[?variant=='{{
        tasmota_update_tasmota_variant
      }}'].otaurl | [0]

- name: Fail if the OTA URL is invalid
  when: not tasmota_update_ota_url is url
  ansible.builtin.fail:
    msg: "{{ tasmota_update_ota_url }} is not a valid URL"

- name: Set upgrade URL
  when: tasmota_update_original_ota_url.json.OtaUrl != tasmota_update_ota_url
  delegate_to: localhost
  ansible.builtin.uri:
    url: >-
      http://{{
        hostvars[inventory_hostname].ansible_host | default(inventory_hostname)
      }}/cm?cmnd=OtaUrl%20{{
        tasmota_update_ota_url
      }}{{
        tasmota_credentials | default('')
      }}
    return_content: true
  register: ota_url

- name: Show upgrade URL
  ansible.builtin.debug:
    msg: >-
      OTA URL {{
        tasmota_update_ota_url
      }}{% if tasmota_update_original_ota_url.json.OtaUrl != tasmota_update_ota_url %}
      (changed from {{
        tasmota_update_original_ota_url.json.OtaUrl
      }}){% endif %}
  changed_when: false
