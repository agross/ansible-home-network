- name: Get OTA URL
  delegate_to: localhost
  ansible.builtin.uri:
    url: >-
      http://{{
        hostvars[inventory_hostname].ansible_host | default(inventory_hostname)
      }}/cm?cmnd=OtaUrl{{ tasmota_credentials | default('') }}
    return_content: true
  register: original_ota_url
  changed_when: false

- name: Determine Tasmota variant
  ansible.builtin.set_fact:
    tasmota_variant: >-
      {{
        firmware.json.StatusFWR.Version |
        regex_replace('.*\(release-(.*)\)$', '\1')
      }}

- name: Determine OTA URL for variant
  ansible.builtin.set_fact:
    tasmota_upgrade_url: >-
      {{ latest_release.json | json_query(url_query) }}.gz
    # noqa: jinja[invalid]
  vars:
    url_query: >-
      "{{ latest_release_key }}"[?variant=='{{ tasmota_variant }}'].otaurl | [0]

- name: Fail if the OTA URL is invalid
  when: not tasmota_upgrade_url is url
  ansible.builtin.fail:
    msg: "{{ tasmota_upgrade_url }} is not a valid URL"

- name: Set upgrade URL
  when: original_ota_url.json.OtaUrl != tasmota_upgrade_url
  delegate_to: localhost
  ansible.builtin.uri: # noqa: yaml[line-length]
    url: >-
      http://{{
        hostvars[inventory_hostname].ansible_host | default(inventory_hostname)
      }}/cm?cmnd=OtaUrl%20{{ tasmota_upgrade_url }}{{ tasmota_credentials | default('') }}
    return_content: true
  register: ota_url

- name: Show upgrade URL
  ansible.builtin.debug:
    msg: >-
      OTA URL {{ tasmota_upgrade_url }}{% if original_ota_url.json.OtaUrl != tasmota_upgrade_url %}
      (changed from {{ original_ota_url.json.OtaUrl }}){% endif %}
  changed_when: false
