#!/usr/bin/env bash
# vim: set ft=jinja-shell ts=2 sw=2 et:

set -euo pipefail

mariadb() {
  local -a exec=(
    docker compose \
           --project-name {{ service_name | ansible.builtin.mandatory | ansible.builtin.quote }} \
           exec \
           db
  )

  local backup=$(cat << BACKUP
    target=/backups/$timestamp-db.tar.gz
    backup=/tmp/backup

    rm -rf -- "\$backup"
    mkdir -- "\$backup"

    dbs=(\$(mysql --user=root \
                  --password="\$MYSQL_ROOT_PASSWORD" \
                  --execute 'show databases' \
                  --silent \
                  --skip-column-names))

    for db in "\${dbs[@]}"; do
      if [[ "\$db" == information_schema ]] || \
         [[ "\$db" == performance_schema ]] || \
         [[ "\$db" == sys ]]; then
        continue
      fi

      # https://serversforhackers.com/c/mysqldump-with-modern-mysql
      mysqldump --user=root \
                --password="\$MYSQL_ROOT_PASSWORD" \
                --skip-lock-tables \
                --single-transaction \
                "\$db" > "\$backup/\$db.sql";
    done

    tar --create \
        --gzip \
        --verbose \
        --file "\$target" \
        --directory "\$backup" \
        -- \
        .
BACKUP
)

  # Need to wrap those invocations in bash because otherwise $MYSQL_ROOT_PASSWORD
  # is not available.

  "${exec[@]}" bash -euo pipefail \
                    -c "$backup"

  "${exec[@]}" bash -euo pipefail \
                    -c 'mysqloptimize --user=root \
                                      "--password=$MYSQL_ROOT_PASSWORD" \
                                      --all-databases'
}

data() {
  local backup_file

  backup_file="${1:?Need backup file}"

  tar --create \
      --gzip \
      --verbose \
      --file "$backup_file" \
      --directory {{ root | ansible.builtin.mandatory | ansible.builtin.quote }}/app \
      -- \
      .
}

cleanup() {
  local directory

  directory="${1:?Need directory to clean up}"

  # Delete files older than {{ vaultwarden_backup_keep_days }} days.
  find "$directory" \
       -type f \
       -mtime '+{{ vaultwarden_backup_keep_days | mandatory }}' \
       -printf 'Deleting old backup %p (%t)\n' \
       -delete
}

sync() {
  local source target

  source="${1:?Need rsync source}"

  rsync --rsh 'ssh -i backup/key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null' \
        --rsync-path='sudo /usr/local/bin/rsync' \
        --super \
        --numeric-ids \
        --archive \
        --verbose \
        --progress \
        --partial \
        --compress \
        --human-readable \
        --delete \
        "$source/" \
        {{ backup_ssh_target | ansible.builtin.mandatory | ansible.builtin.quote }}/vaultwarden
}

timestamp="$(date +'%Y-%m-%dT%H-%M-%S')"

target_dir="$PWD/backup/backups"
mkdir --parents "$target_dir"

mariadb
data "$target_dir/$timestamp-data.tar.gz"
cleanup "$target_dir"
sync "$target_dir"
