name: Lint

on:
  pull_request:
  push:

# Cancel previous runs when a new commit is pushed.
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  ansible-lint:
    name: Ansible Lint
    runs-on: ubuntu-latest

    container:
      image: ghcr.io/ansible-community/community-ee-base:2.19.3-1
      # Run as root to install packages, tty for unbuffered output.
      options: --user root --tty

    defaults:
      run:
        # The container image provides bash.
        shell: bash

    if: >-
      github.event_name != 'pull_request' ||
      github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name

    steps:
      - name: Install git and ansible/ansible-lint dependencies
        run: |
          dnf install --assumeyes git wget

          git --version
          ansible --version

      - name: Mark workspace directory as safe
        # Cannot use github.workspace: https://github.com/actions/runner/issues/2058
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Get latest code
        uses: actions/checkout@v5

      - name: Run ansible-lint
        uses: ansible/ansible-lint@v25.9.2
        with:
          setup_python: false
          requirements_file: requirements.yml
          args: --exclude .ansible

  encrypted-vaults:
    name: Ensure vaults are encrypted
    runs-on: ubuntu-latest

    if: >-
      github.event_name != 'pull_request' ||
      github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name

    steps:
      - name: Get latest code
        uses: actions/checkout@v5

      - name: Ensure all *.vault.yml files are encrypted
        run: |
          export fail="$(mktemp)"

          must-be-encrypted() {
            local file="${1?Need file}"

            if [[ "$(head -n1 "$file")" != \$ANSIBLE_VAULT\;* ]]; then
              >&2 printf 'Unencrypted vault file: %s' "$file"
              echo 1 > "$fail"
            fi
          }

          export -f must-be-encrypted

          find . -type f \
                 -name '*.vault.yml' \
                 -exec bash -c 'must-be-encrypted "{}"' \;

          failed="$(stat --printf=%s "$fail")"
          if (( failed > 0 )); then
            >&2 printf 'Found unencrypted vault files\n'
            exit 1
          fi
