- name: Create directories
  ansible.builtin.file:
    path: "{{ target }}/{{ item.path }}"
    state: directory
    owner: "{{ settings.owner | default(omit) }}"
    group: "{{ settings.group | default(omit) }}"
    mode: "{{ settings.mode | default('755', true) }}"
  vars:
    settings: >-
      {{
        files[item.path] |
        default(fnmatch_candidates | first) |
        default(None)
      }}
    fnmatch_candidates_yaml: |
      {% for entry in files | ansible.builtin.dict2items %}
      {% if item.path is fnmatch(entry.key) %}
      - # for debugging, the key of the follow object is: {{ entry.key }}
        {{ entry.value }}
      {% endif %}
      {% endfor %}
    fnmatch_candidates: >-
      {{
        fnmatch_candidates_yaml |
        ansible.builtin.from_yaml |
        default([], true) |
        list
      }}
    root_directory: >-
      {{
        {
          'path': ''
        }
      }}
  loop: >-
    {{
      [root_directory] +
      lookup('community.general.filetree',
             directory,
             wantlist = true) |
      selectattr('state', 'eq', 'directory')
    }}
  loop_control:
    label: "{{ item.path }}{{ ' settings=' ~ settings if settings }}"
  notify: "{{ notify_ | default(omit) }}"

- name: Copy non-template files
  ansible.builtin.copy:
    src: "{{ item.src }}"
    dest: "{{ target }}/{{ settings.rename | default(item.path) }}"
    owner: "{{ settings.owner | default(omit) }}"
    group: "{{ settings.group | default(omit) }}"
    mode: "{{ settings.mode | default('preserve', true) }}"
  vars:
    settings: >-
      {{
        files[item.path] |
        default(fnmatch_candidates | first) |
        default(None)
      }}
    fnmatch_candidates_yaml: |
      {% for entry in files | ansible.builtin.dict2items %}
      {% if item.path is fnmatch(entry.key) %}
      - # for debugging, the key of the follow object is: {{ entry.key }}
        {{ entry.value }}
      {% endif %}
      {% endfor %}
    fnmatch_candidates: >-
      {{
        fnmatch_candidates_yaml |
        ansible.builtin.from_yaml |
        default([], true) |
        list
      }}
  loop: >-
    {{
      lookup('community.general.filetree',
             directory,
             wantlist = true) |
      selectattr('state', 'eq', 'file') |
      rejectattr('path', 'ansible.builtin.search', '\.j2$') |
      rejectattr('path', 'ansible.builtin.search', '/\.gitignore$')
    }}
  loop_control:
    label: "{{ item.path }}{{ ' settings=' ~ settings if settings }}"
  notify: "{{ notify_ | default(omit) }}"

- name: Copy template files
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: >-
      {{
        target
      }}/{{
        settings.rename |
        default(
          item.path | ansible.builtin.regex_replace('\.j2$', '')
        )
      }}
    owner: "{{ settings.owner | default(omit) }}"
    group: "{{ settings.group | default(omit) }}"
    mode: "{{ settings.mode | default('preserve', true) }}"
    lstrip_blocks: true
  vars:
    settings: >-
      {{
        files[item.path] |
        default(fnmatch_candidates | first) |
        default(None)
      }}
    fnmatch_candidates_yaml: |
      {% for entry in files | ansible.builtin.dict2items %}
      {% if item.path is fnmatch(entry.key) %}
      - # for debugging, the key of the follow object is: {{ entry.key }}
        {{ entry.value }}
      {% endif %}
      {% endfor %}
    fnmatch_candidates: >-
      {{
        fnmatch_candidates_yaml |
        ansible.builtin.from_yaml |
        default([], true) |
        list
      }}
  loop: >-
    {{
      lookup('community.general.filetree',
             directory,
             wantlist = true) |
      selectattr('state', 'eq', 'file') |
      selectattr('path', 'ansible.builtin.search', '\.j2$') |
      rejectattr('path', 'ansible.builtin.search', '/\.gitignore$')
    }}
  loop_control:
    label: "{{ item.path }}{{ ' settings=' ~ settings if settings }}"
  notify: "{{ notify_ | default(omit) }}"
